@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "SignalR 2.x";
}

<div class="jumbotron">
    <h1>ASP.NET SignalR 2.x</h1>
    <p class="lead">Demos for SignalR 2.0 and upcoming 2.x releases.</p>
    <p><a href="https://github.com/DamianEdwards/SignalR-2.x-demo" class="btn btn-primary btn-large">Get the code &raquo;</a></p>
</div>

<div class="row">
    <div class="col-md-4">
        <h2>.NET 4.5 Requirement</h2>
        <p>SignalR 2.0.0 removed support for .NET 4.0 on the server. The minimum required .NET version is now .NET 4.5.</p>
    </div>
    <div class="col-md-4">
        <h2>&gt;50 Bug Fixes</h2>
        <p>SignalR 2.0.0 fixed more than 50 bugs in the server and client libraries, improving stability, performance, and improving usability.</p>
        <p><a class="btn btn-default" href="https://github.com/signalr/signalr/releases/">See the full release notes &raquo;</a></p>
    </div>
    <div class="col-md-4">
        <h2>OWIN Startup</h2>
        <p>SignalR 2.0.0 removed all ties to System.Web and took a direct dependency on <a href="http://owin.org">OWIN</a>. This changed how applications setup SignalR during app start.</p>
        <p><a class="btn btn-default" href="http://www.asp.net/signalr/overview/signalr-20/getting-started-with-signalr-20/upgrading-signalr-1x-projects-to-20">Learn more about upgrading &raquo;</a></p>
    </div>
</div>
<div class="row">
    <div class="col-md-4">
        <h2>Hub Exceptions</h2>
        <p>
            The new exception type <code>HubException</code> can be thrown inside your hub method to
            provide meaningful error details to your clients, including extra custom data.
        </p>
        <p><a class="btn btn-default" href="HubExceptions/">Learn more &raquo;</a></p>
    </div>
    <div class="col-md-4">
        <h2>CORS Support</h2>
        <p>
            In SignalR 1.x cross domain requests were controlled by a single <code>EnableCrossDomain</code> flag.
            This flag controlled both JSONP and CORS requests. For greater fleixibility, SignalR 2.x removes all
            CORS support from SignalR and made new OWIN middleware available to support these scenarios.
        </p>
        <p><a class="btn btn-default" href="CORS/">Learn more &raquo;</a></p>
    </div>
    <div class="col-md-4">
        <h2>JavaScript Send Objects</h2>
        <p>
            The JavaScript client now allows you to send objects directly over connections. They will be implicitly
            serialized to JSON on your behalf.
        </p>
        <p><a class="btn btn-default" href="JavaScriptSendObjects/">Learn more &raquo;</a></p>
    </div>
</div>
<div class="row">
    <div class="col-md-4">
        <h2>JavaScript Error Handling</h2>
        <p>
            All JavaScript error handling callbacks now flow JavaScript error objects instead of raw strings.
            This allows us to flow richer information to your error handlers. You can get the inner exception
            from the source property of the error.
        </p>
        <p><a class="btn btn-default" href="JavaScriptErrorHandling/">Learn more &raquo;</a></p>
    </div>
</div>